using System.Collections;
using System.Text;

namespace Finaltouch.DragDrop.Components.Utilities
{

    public class DragDropList<TItem> : IList<TItem> where TItem : IDragDropItem
    {
        /// <summary>
        /// Creates an empty List of items for drag and drop with an autogenerated identifier.
        /// </summary>
        public DragDropList() : this($"list-{IdGenerator.GetId(6)}", Array.Empty<TItem>()) { }
        /// <summary>
        /// Creates an empty List of items for drag and drop with the specified identifier.
        /// </summary>
        /// <param name="id">The specified string identifier.</param>
        public DragDropList(string id) : this(id, Array.Empty<TItem>()) { }
        /// <summary>
        /// Creates a List of items for drag and drop with the specified identifier and specified collection of items.
        /// </summary>
        /// <param name="id">The specified string identifier.</param>
        public DragDropList(string id, IEnumerable<TItem> items)
        {
            if (string.IsNullOrEmpty(id) || id.Contains(' '))
            {
                throw new ArgumentException("A DragDropList must be assigned a valid identifier string that contains no spaces.");
            }
            if (items == null)
            {
                throw new ArgumentNullException(nameof(items));
            }
            Id = id;
            Items = new List<TItem>(items);
        }

        public TItem this[int index] { get => ((IList<TItem>)Items)[index]; set => ((IList<TItem>)Items)[index] = value; }

        public int Count => ((ICollection<TItem>)Items).Count;

        public bool IsReadOnly => ((ICollection<TItem>)Items).IsReadOnly;

        public string Id { get; private set; }
        private List<TItem> Items { get; set; }

        public void Add(TItem item)
        {
            ((ICollection<TItem>)Items).Add(item);
        }

        public void Clear()
        {
            ((ICollection<TItem>)Items).Clear();
        }

        public bool Contains(TItem item)
        {
            return ((ICollection<TItem>)Items).Contains(item);
        }

        public void CopyTo(TItem[] array, int arrayIndex)
        {
            ((ICollection<TItem>)Items).CopyTo(array, arrayIndex);
        }

        public IEnumerator<TItem> GetEnumerator()
        {
            return ((IEnumerable<TItem>)Items).GetEnumerator();
        }

        public int IndexOf(TItem item)
        {
            return ((IList<TItem>)Items).IndexOf(item);
        }

        public void Insert(int index, TItem item)
        {
            ((IList<TItem>)Items).Insert(index, item);
        }

        public bool Remove(TItem item)
        {
            return ((ICollection<TItem>)Items).Remove(item);
        }

        public void RemoveAt(int index)
        {
            ((IList<TItem>)Items).RemoveAt(index);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)Items).GetEnumerator();
        }

        public override string ToString()
        {
            var sb = new StringBuilder();
            for (var index = 0; index < Count; index++)
            {
                sb.AppendLine($"[Index: {index} Id: {this[index].Id} Text: {this[index].Text}] ");
            }
            return sb.ToString();
        }

    }
}
